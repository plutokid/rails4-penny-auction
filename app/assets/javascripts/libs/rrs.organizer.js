// Generated by CoffeeScript 1.7.1
(function() {
  var __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (window.Rrs == null) {
    window.Rrs = {};
  }

  Rrs.Component = (function() {
    function Component(inProps) {
      this._elements = Rrs.Obj.extend(this._elements, this.elements);
      this._listeners = Rrs.Obj.extend(this._listeners, this.listeners);
      this._handlers = Rrs.Obj.extend(this._handlers, this.handlers);
      if ((inProps != null ? inProps.elements : void 0) != null) {
        this._elements = Rrs.Obj.extend(this._elements, inProps.elements);
      }
      if ((inProps != null ? inProps.listeners : void 0) != null) {
        this._listeners = Rrs.Obj.extend(this._listeners, inProps.listeners);
      }
      if ((inProps != null ? inProps.handlers : void 0) != null) {
        this._handlers = Rrs.Obj.extend(this._handlers, inProps.handlers);
      }
      this.elements = this._elements;
      this.listeners = this._listeners;
      this.handlers = this._handlers;
    }

    Component.create = function(inProps) {
      var className;
      className = Rrs.Obj.getClass(this);
      return new window[className](inProps);
    };

    Component.prototype.init = function(inProps) {
      if ((inProps != null ? inProps.shared : void 0) != null) {
        this.shared = Rrs.Obj.extend(this.shared, inProps.shared);
      }
      this._initHandlers();
      return this._initListeners();
    };

    Component.prototype.emit = function(inSignalName, inData) {
      var sender;
      sender = Rrs.Obj.getClass(this);
      return Rrs.Observer.instance().emit(sender, inSignalName, inData);
    };

    Component.prototype._initHandlers = function() {
      var element, elementName, eventName, handler, handlerData, handlerName, _ref, _results;
      _ref = this._handlers;
      _results = [];
      for (handlerName in _ref) {
        handler = _ref[handlerName];
        handlerData = handlerName.split(' ');
        elementName = handlerData[0];
        eventName = handlerData[1];
        if (handlerData.length !== 2) {
          throw new Error("" + elementName + " has incorrect format. Selector name and event name must be splitted with single space");
        }
        element = this._elements[elementName];
        if (Rrs.Obj.isString(element)) {
          element = jQuery(element);
        } else if (Rrs.Obj.isJQeryObject(element)) {
          element = jQuery(element.selector);
        } else {
          throw new Error("" + elementName + " must be either string selector or jQuery object");
        }
        if (element.length > 0) {
          element.unbind(eventName);
          _results.push(element.bind(eventName, (function(_this) {
            return function(e) {
              return handler.call(_this, e);
            };
          })(this)));
        } else {
          _results.push(Rrs.logger.error("Unable to bind " + eventName + " for " + elementName + " since " + elementName + " node does not exist in DOM"));
        }
      }
      return _results;
    };

    Component.prototype._initListeners = function() {
      var listenerCallback, listenerName, listenerNameData, _ref, _results;
      _ref = this._listeners;
      _results = [];
      for (listenerName in _ref) {
        listenerCallback = _ref[listenerName];
        listenerNameData = listenerName.split(":");
        if ((listenerNameData != null) && ((listenerNameData.length === 1) || (listenerNameData.length === 2))) {
          if (listenerNameData.length === 1) {
            _results.push(Rrs.Observer.instance().listen(null, listenerNameData[0], listenerCallback, this));
          } else if (listenerNameData.length === 2) {
            _results.push(Rrs.Observer.instance().listen(listenerNameData[0], listenerNameData[1], listenerCallback, this));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(Rrs.logger.error("Invalid listener format of name (" + listenerName + "). Must be Namespace:signal"));
        }
      }
      return _results;
    };

    return Component;

  })();

  if (window.Rrs == null) {
    window.Rrs = {};
  }

  Rrs.logger = {
    error: function() {
      return console.error.apply(console, arguments);
    },
    log: function() {
      return console.log.apply(console, arguments);
    },
    debug: function() {
//      return console.debug.apply(console, arguments);
    }
  };

  if (window.Rrs == null) {
    window.Rrs = {};
  }

  Rrs.Observer = (function() {
    var instance, _listeners;

    instance = null;

    _listeners = {};

    Observer.instance = function() {
      return instance != null ? instance : instance = new Rrs.Observer;
    };

    function Observer() {}

    Observer.prototype.emit = function(inNamespace, inSignalName, inData) {
      var listener, namespacedSignal, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _results;
      namespacedSignal = "" + inNamespace + ":" + inSignalName;
      if (_listeners[namespacedSignal] != null) {
        _ref = _listeners[namespacedSignal];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          listener = _ref[_i];
          Rrs.logger.debug("Emitting namespaced signal " + namespacedSignal + ".", listener);
          if ((_ref1 = listener.callback) != null) {
            _ref1.call(listener.context, inData);
          }
        }
      }
      if (_listeners[inSignalName] != null) {
        _ref2 = _listeners[inSignalName];
        _results = [];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          listener = _ref2[_j];
          Rrs.logger.debug("Emitting broadcast signal " + namespacedSignal + ".", _listeners);
          _results.push((_ref3 = listener.callback) != null ? _ref3.call(listener.context, inData) : void 0);
        }
        return _results;
      }
    };

    Observer.prototype.listen = function(inNamespace, inSignalName, callback, context) {
      var signal;
      if (inNamespace) {
        signal = "" + inNamespace + ":" + inSignalName;
      } else {
        signal = inSignalName;
      }
      if (context == null) {
        throw new Error("Conext is not set for " + signal);
      }
      if (callback == null) {
        throw new Error("Callback is not set for " + signal);
      }
      Rrs.logger.debug("Attaching listener to " + signal + " signal.", _listeners);
      if (_listeners[signal] == null) {
        _listeners[signal] = [];
      }
      return _listeners[signal].push({
        callback: callback,
        context: context
      });
    };

    return Observer;

  })();

  if (window.Rrs == null) {
    window.Rrs = {};
  }

  Rrs.PageModule = (function() {
    var _props;

    _props = {};

    function PageModule(inProps) {
      var cmp, cmpName, _ref;
      _props = inProps;
      this._checkEnv();
      this._components = Rrs.Obj.extend(this._components, this.components);
      if ((_props != null ? _props.components : void 0) != null) {
        this._components = Rrs.Obj.extend(this._components, _props.components);
      }
      this._shared = Rrs.Obj.extend(this._shared, this.shared);
      if ((_props != null ? _props.shared : void 0) != null) {
        this._shared = Rrs.Obj.extend(this._shared, _props.shared);
      }
      _ref = this._components;
      for (cmpName in _ref) {
        cmp = _ref[cmpName];
        if (cmp instanceof Rrs.Component) {
          cmp.init({
            shared: this._shared
          });
        } else {
          Rrs.logger.error("" + (cmp.toString()) + " is not an instance of Component");
        }
      }
    }

    PageModule.create = function(inProps) {
      var className;
      className = Rrs.Obj.getClass(this);
      return new window[className](inProps);
    };

    PageModule.prototype._checkEnv = function() {
      if (Rrs.Component == null) {
        throw new Error("Rrs.Component is not defined");
      }
    };

    return PageModule;

  })();

  if (window.Rrs == null) {
    window.Rrs = {};
  }

  Rrs.mixOf = function() {
    var Mixed, base, method, mixin, mixins, name, _i, _ref;
    base = arguments[0], mixins = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    Mixed = (function(_super) {
      __extends(Mixed, _super);

      function Mixed() {
        return Mixed.__super__.constructor.apply(this, arguments);
      }

      return Mixed;

    })(base);
    for (_i = mixins.length - 1; _i >= 0; _i += -1) {
      mixin = mixins[_i];
      _ref = mixin.prototype;
      for (name in _ref) {
        method = _ref[name];
        Mixed.prototype[name] = method;
      }
    }
    return Mixed;
  };

  Rrs.Obj = {
    getClass: function(inObject) {
      var className, objectType;
      objectType = (typeof inObject).toLowerCase();
      if (objectType === "function") {
        className = /^function\s(\w+)/.exec(inObject)[1];
      } else if (objectType === "object") {
        className = /(\w+)\(/.exec(inObject.constructor.toString())[1];
      } else {
        className = typeof inObject;
      }
      return className;
    },
    extend: function(object, properties) {
      var key, val;
      if (object == null) {
        object = {};
      }
      if (properties == null) {
        properties = {};
      }
      for (key in properties) {
        val = properties[key];
        object[key] = val;
      }
      return object;
    },
    isString: function(object) {
      return (typeof object).toLowerCase() === 'string';
    },
    isObject: function(object) {
      return (typeof object).toLowerCase() === 'object';
    },
    isFunction: function(object) {
      return (typeof object).toLowerCase() === 'function';
    },
    isJQeryObject: function(object) {
      return object instanceof jQuery;
    },
    uniqueId: function(length) {
      var id;
      if (length == null) {
        length = 8;
      }
      id = "";
      while (id.length < length) {
        id += Math.random().toString(36).substr(2);
      }
      return id.substr(0, length);
    }
  };

}).call(this);
